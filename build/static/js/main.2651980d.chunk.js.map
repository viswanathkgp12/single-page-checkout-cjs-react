{"version":3,"sources":["img/logo.png","img/checkout-complete-img.JPG","img/cartImg.png","img/seities_apparel_logo_small.png","components/CartItems.js","components/CartModal.js","components/Nav.js","components/LeftPanel.js","components/Footer.js","components/ProductCard.js","components/ProductContainer.js","components/CheckoutForm.js","utils/axiosWithAuth.js","components/CheckoutItems.js","components/CheckoutContainer.js","components/CheckoutComplete.js","utils/PrivateRoute.js","App.js","index.js"],"names":["module","exports","CartItems","props","helpFnc","useContext","CartItemsContext","Item","Image","size","src","Content","verticalAlign","Header","className","Button","negative","onClick","newQuanity","item","quantity","subtractQuanity","id","Icon","name","Input","value","positive","addQaunity","Extra","floated","CartModal","history","useHistory","cart","total_unique_items","Group","divided","line_items","map","key","Modal","Actions","basic","emptyCart","color","e","push","localStorage","setItem","setModalOpen","setCheckout","subtotal","formatted_with_symbol","image","Description","Nav","Menu","borderless","Segment","to","logo","position","icon","placeholder","trigger","checkout","Label","open","modalOpen","onOpen","onClose","closeIcon","LeftPanel","Footer","inverted","textAlign","ProductCard","useState","variantInfo","Card","Meta","fluid","preventDefault","addToCart","product","ProductContainer","commerce","Commerce","products","setProducts","useEffect","list","then","res","data","catch","err","console","log","Divider","horizontal","Grid","stackable","columns","centered","Column","width","CheckoutForm","useForm","register","handleSubmit","errors","reset","control","sameBilling","processing","setProcessing","lineItems","shipCountry","setQr","a","getShippingOptions","Form","onSubmit","final","fulfillment","shipping_method","shipOption","customer","firstname","lastname","email","shipping","street","town_city","county_state","postal_zip_code","country","billing","billing_name","billing_street","billing_town_city","billing_county_state","billing_postal_zip_code","billing_country","gateway","stripInfo","number","exp_month","expiry_month","exp_year","expiry_year","cvc","address_zip","postal_billing_zip_code","axios","create","baseURL","headers","post","qs","stringify","card","payment","token","capture","tokenId","setReceipt","removeItem","window","alert","error","message","loading","type","ref","required","onChange","htmlFor","pointing","delay","style","height","onError","onScan","setTimeout","text","postData","amount","credentialInfo","credential","pin","encoded","encType","posInfo","venueId","userName","userId","vendorId","vendorName","vendorType","vendorRoleId","orderInfo","orderId","currency","total","subTotal","remaining","discount","tax","sku","itemName","itemCost","redemptions","redemptionId","redemptionName","redemptionValue","partnerId","transactionId","payments","paymentType","subpaymentType","cartItemIds","paymentData","isTip","isOffline","post2Data","balance","spent","externalId","slipLines","Authorization","CheckoutItems","product_name","line_total","CheckoutContainer","liveObject","setLiveObject","setTokenId","setShippingOptions","setShipOption","discountCode","setDiscountCode","noDiscountCode","setNoDiscountCode","invalidDiscountCode","setInvalidDiscountCode","cartId","match","params","generateToken","live","padded","Row","countrySymbol","shippingOptionsArray","option","shInfo","description","price","formatted_with_code","Container","checkDiscount","code","valid","formatted","length","amount_saved","CheckoutComplete","img","PrivateRoute","Component","component","rest","render","getItem","React","createContext","App","setCart","receipt","retrieve","cartHelperFunctions","deleteItem","lineItemId","remove","update","productId","add","Provider","empty","relaxed","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2651980d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.28565e69.png\";","module.exports = __webpack_public_path__ + \"static/media/checkout-complete-img.476c85d6.JPG\";","module.exports = __webpack_public_path__ + \"static/media/cartImg.c0d2d480.png\";","module.exports = __webpack_public_path__ + \"static/media/seities_apparel_logo_small.a7f496ab.png\";","import React, { useContext } from 'react';\nimport { Item, Header, Button, Icon, Input } from 'semantic-ui-react';\n\nimport { CartItemsContext } from '../App'\n\nconst CartItems = (props) => {\n\n    // console.log(props, 'props from line_items')\n\n    const helpFnc = useContext(CartItemsContext)\n\n    return (\n        <>\n            <Item.Image size='tiny' src={\"https://uploads.appetizeapp.com/product-images/thumb__1625848407.jpg\"} />\n            <Item.Content verticalAlign='middle'>\n                <Item.Header>{\"Cheese Cake\"}</Item.Header>\n                {/* <Item.Meta>\n                    <span>{props.item.variants[0].option_name}</span>\n                </Item.Meta> */}\n                <div className='quanity-group'>\n                    <Button\n                        negative \n                        className='quan-buttons' \n                        onClick={() => {\n                            let newQuanity = props.item.quantity - 1\n                            helpFnc.subtractQuanity(props.item.id, newQuanity)\n                        }}\n                    > \n                        <Icon name='minus' /> \n                    </Button>\n                    <Input \n                        className='input-quanity'\n                        value={1} \n                    />\n                    <Button\n                        positive \n                        className='quan-buttons'\n                        onClick={() => {\n                            let newQuanity = props.item.quantity + 1\n                            helpFnc.addQaunity(props.item.id, newQuanity)\n                        }}\n                    > \n                        <Icon name='plus' /> \n                    </Button>\n                </div>\n                <Item.Extra className='item-total'>\n                    <Header floated='right'>${\"4.29\"}</Header>\n                </Item.Extra>\n            </Item.Content>\n        </>\n    );\n};\n\nexport default CartItems;","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Modal, Image, Header, Item } from 'semantic-ui-react';\n\nimport cartImg from '../img/cartImg.png'\nimport CartItems from './CartItems'\n\nconst CartModal = (props) => {\n\n    // console.log(props.cart, 'cart info inside CartModal!!')\n\n    let history = useHistory()\n    // console.log(history, 'route props')\n\n    const goToCheckout = e => {\n        history.push(`/checkout/${props.cart.id}`)\n        localStorage.setItem('cart-id', props.cart.id)\n        props.setModalOpen(false)\n        props.setCheckout(true)\n    }\n\n\n    return (\n        <>\n            {props.cart && props.cart.total_unique_items > 0 ? (\n                <>\n                    <Item.Group divided>\n                        {props.cart.line_items.map(item => (\n                            <Item key={item.id}>\n                                <CartItems item={item}/>\n                            </Item>\n                        ))}\n                    </Item.Group>\n\n                    <Modal.Actions className='model-bottom'>\n                        <Button  \n                            basic \n                            negative  \n                            floated='left'\n                            size='big' \n                            onClick={props.emptyCart}\n                        >\n                            Empty Cart\n                        </Button>\n                        <Button \n                            floated='left' \n                            size='big' \n                            color='blue' \n                            onClick={goToCheckout}\n                        >\n                            Checkout\n                        </Button>\n                        <Header floated='right'>{props.cart.subtotal.formatted_with_symbol}</Header>\n                    </Modal.Actions>\n                </>\n            ) \n            :\n            (\n                <>\n                    <Modal.Header>Cart</Modal.Header>\n                    <Modal.Content image>\n                        {/* <Image wrapped size='huge' src={cartImg} /> */}\n                        <Modal.Description>\n                            <Header>Your Cart is currently Empty</Header>\n                            {/* <p>\n                                It would make you very happy if you added an item to the cart\n                            </p> */}\n                        </Modal.Description>\n                    </Modal.Content>\n                </>\n            )\n            }\n        </>\n    );\n};\n\nexport default CartModal;","import React from 'react';\nimport { Menu, Image, Icon, Segment, Input, Modal, Label } from 'semantic-ui-react'\nimport logo from '../img/logo.png'\n\nimport CartModal from './CartModal'\nimport { Link } from 'react-router-dom';\n\nconst Nav = (props) => {\n\n    const iconDisplay = () => {\n\n        if (props.checkout) {\n            return (\n                <>\n                </>\n            )\n        }\n\n        if (props.cart && props.cart.total_unique_items > 0) {\n            return(\n                <Label color='green' >\n                    <Icon name='shopping cart' size='big'/>\n                    {props.cart.total_unique_items}\n                </Label>\n            )\n        } else {\n            return (\n                <Icon name='shopping cart' size='large'/>\n            )\n        }\n    }\n\n\n    return (\n        <Menu borderless> \n            <Segment className='nav-segment'>\n                <Menu.Item>\n                    <Link to='/'><Image src={logo} size='tiny' /></Link>\n                </Menu.Item>\n\n                <Menu.Item position='right'>\n                    <Input icon='search' placeholder='Search...' />\n                </Menu.Item>\n                \n                <Menu.Item>\n                    <Modal \n                        trigger={iconDisplay()}\n                        open={props.modalOpen}\n                        onOpen={() => props.setModalOpen(true)} \n                        onClose={() => props.setModalOpen(false)} \n                        className='cart-model' \n                        closeIcon\n                    >\n                        <CartModal \n                            cart={props.cart} \n                            emptyCart={props.emptyCart} \n                            setModalOpen={props.setModalOpen}\n                            setCheckout={props.setCheckout}\n                        />\n                    </Modal>\n                </Menu.Item>\n            </Segment>\n        </Menu>\n    );\n};\n\nexport default Nav","import React from 'react';\nimport { Menu, Image } from 'semantic-ui-react';\nimport leftImage from '../img/seities_apparel_logo_small.png'\n\nconst LeftPanel = () => {\n    return (\n        <>\n        </>\n    );\n};\n\nexport default LeftPanel;","import React from 'react';\nimport { Segment, Menu } from 'semantic-ui-react';\n\nconst Footer = () => {\n    return (\n        <Segment size='huge' inverted textAlign='center'>\n            Copyright © Your Website 2022\n        </Segment>\n    );\n};\n\nexport default Footer;","import React, { useState, useEffect } from 'react';\nimport { Card, Image, Button, Icon, Dropdown } from 'semantic-ui-react';\n\nconst ProductCard = (props) => {\n    // console.log(props.product, 'props from Container')\n\n    const [sizes, setSizes] = useState([])\n    const [variantInfo, setVariantInfo] = useState()\n\n    // useEffect(() => {        \n        \n    //     // let finalSizeArray = props.product.variants[0].options.map(option => {\n    //     //     let sizeInfo = {}\n\n    //     //     sizeInfo.key = option.name\n    //     //     sizeInfo.text = option.name\n    //     //     sizeInfo.value = option.id\n\n    //     //     return sizeInfo\n    //     // })\n\n    //     setSizes(finalSizeArray)\n    // }, [])\n\n    const handleSize = (e, {value}) => {\n        setVariantInfo({[props.product.variants[0].id]: value})\n    }\n\n    const handleButtonAddCart = e => {\n        e.preventDefault()\n        props.addToCart(props.product.id, variantInfo)\n        \n        \n        // Funtion to Clear Select Input for Dropdown - Needs work. \n        // let selectInput = document.querySelectorAll('.sizes-drop')\n        // selectInput.forEach((input,i) => {\n        //     input.children[0].innerHTML = 'Select Size'\n        //     // input.children[0].classList.add('default')\n        // })\n    }\n\n    return (\n        <Card>\n            <Image src={\"https://uploads.appetizeapp.com/product-images/thumb__1625848407.jpg\"} />\n            <Card.Content>\n                <Card.Header>{\"Cheese Cake\"}</Card.Header>\n                <Card.Meta>{\"$4.29\"}</Card.Meta>\n                <Card.Description>{\"Plain Cheese Cake\"}</Card.Description>\n                <Button fluid className='add-button' onClick={handleButtonAddCart}>\n                    Add to Cart\n                    <Icon name='arrow right' />\n                </Button>\n            </Card.Content>\n        </Card>\n    );\n};\n\nexport default ProductCard;\n","import React, { useState, useEffect } from 'react';\nimport Commerce from '@chec/commerce.js'\nimport { Grid, Divider } from 'semantic-ui-react';\nimport ProductCard from '../components/ProductCard'\n\nconst ProductContainer = (props) => {\n\n    const commerce = new Commerce(\"pk_test_424561dc50e53e368fb3563d39a0622a953124acb7dca\")\n    \n    const [products, setProducts] = useState([])\n\n    useEffect(() => {\n        commerce.products.list()\n          .then(res => {\n            setProducts(res.data)\n          })\n          .catch(err => console.log(err))\n\n          props.setCheckout(false)\n    },[])\n\n    return (\n        <>\n            <Divider horizontal>Virtual Kiosk</Divider>\n            <Grid stackable columns='equal' centered>\n                {/* <Image src={hero} fluid/> */}\n                {products.map(product => (\n                    <Grid.Column width={5} key={product.id}>\n                        <ProductCard \n                            product={product} \n                            addToCart={props.addToCart} \n                        />\n                    </Grid.Column>\n                ))}\n            </Grid>\n        </>\n    );\n};\n\nexport default ProductContainer;","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport Commerce from \"@chec/commerce.js\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { axiosWithAuth } from \"../utils/axiosWithAuth\";\nimport qs from \"qs\";\nimport QrReader from \"react-qr-scanner\";\n// import { QrReader } from \"react-qr-reader\";\n\n// Import Selections\nimport { monthOptions, yearOptions } from \"../utils/cardOptions\";\nimport { stateOptions } from \"../utils/stateOptions\";\nimport { canada } from \"../utils/North America/canada\";\nimport { mexico } from \"../utils/North America/mexico\";\nimport { countries } from \"../utils/Countries\";\nimport axios from \"axios\";\n\nconst CheckoutForm = (props) => {\n  // console.log(props, 'inside checkout form!!')\n\n  const commerce = new Commerce(\n    \"pk_test_424561dc50e53e368fb3563d39a0622a953124acb7dca\"\n  );\n  const { register, handleSubmit, errors, control, reset } = useForm();\n\n  let history = useHistory();\n\n  const [sameBilling, setSameBilling] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [lineItems, setLineItems] = useState();\n  const [shipCountry, setShipCountry] = useState();\n  const [billingShipCountry, setBillingShipCountry] = useState();\n  const [qr, setQr] = useState();\n\n  let a = \"\";\n\n  const previewStyle = {\n    height: 240,\n    width: 320,\n  };\n\n  const handleScan = (data) => {\n    if (data && \"text\" in data) {\n      if (a != \"\") return;\n\n      setTimeout(() => {\n        if (a != \"\") return;\n        console.log(\"\", a);\n        a = data.text;\n        console.log(data.text);\n        setQr(data.text);\n\n        const postData = {\n          amount: \"1\",\n          credentialInfo: {\n            credential: data.text,\n            pin: \"string\",\n            encoded: true,\n            encType: \"string\",\n          },\n          posInfo: {\n            venueId: 0,\n            userName: \"string\",\n            userId: 0,\n            vendorId: 0,\n            vendorName: \"string\",\n            vendorType: 0,\n            vendorRoleId: 0,\n          },\n          orderInfo: {\n            orderId: \"string\",\n            currency: \"string\",\n            total: \"string\",\n            subTotal: \"string\",\n            remaining: \"4.29\",\n            discount: \"string\",\n            tax: \"string\",\n            cart: [\n              {\n                id: 0,\n                sku: \"string\",\n                itemName: \"string\",\n                itemCost: \"string\",\n                discount: \"string\",\n                tax: \"string\",\n                quantity: \"string\",\n                type: \"string\",\n              },\n            ],\n            redemptions: [\n              {\n                redemptionId: 0,\n                redemptionName: \"string\",\n                redemptionValue: \"string\",\n                partnerId: \"string\",\n                transactionId: \"string\",\n              },\n            ],\n            payments: [\n              {\n                paymentType: 0,\n                subpaymentType: 0,\n                amount: \"string\",\n                cartItemIds: [\"string\"],\n                paymentData: \"string\",\n                credentialInfo: {\n                  credential: \"string\",\n                  pin: \"string\",\n                  encoded: true,\n                  encType: \"string\",\n                },\n              },\n            ],\n          },\n          isTip: false,\n          isOffline: false,\n          transactionId: \"string\",\n        };\n\n        const post2Data = {\n          orderInfo: {\n            orderId: \"string\",\n            currency: \"string\",\n            total: \"string\",\n            subTotal: \"string\",\n            remaining: \"1.2\",\n            discount: \"string\",\n            tax: \"string\",\n            cart: [\n              {\n                id: 0,\n                sku: \"string\",\n                itemName: \"string\",\n                itemCost: \"string\",\n                discount: \"string\",\n                tax: \"string\",\n                quantity: \"string\",\n                type: \"string\",\n              },\n            ],\n            redemptions: [\n              {\n                redemptionId: 0,\n                redemptionName: \"string\",\n                redemptionValue: \"string\",\n                partnerId: \"string\",\n                transactionId: \"string\",\n              },\n            ],\n            payments: [\n              {\n                paymentType: 0,\n                subpaymentType: 0,\n                amount: \"string\",\n                cartItemIds: [\"string\"],\n                paymentData: \"string\",\n                credentialInfo: {\n                  credential: \"string\",\n                  pin: \"string\",\n                  encoded: true,\n                  encType: \"string\",\n                },\n              },\n            ],\n          },\n          payments: [\n            {\n              balance: \"0\",\n              spent: \"2.49\",\n              externalId: data.text,\n              slipLines: [],\n              paymentData: \"\",\n            },\n          ],\n          posInfo: {\n            venueId: 0,\n            userName: \"string\",\n            userId: 0,\n            vendorId: 0,\n            vendorName: \"string\",\n            vendorType: 0,\n            vendorRoleId: 0,\n          },\n        };\n\n        axios\n          .post(\n            \"https://thingproxy.freeboard.io/fetch/https://18.224.140.101/api/v1/ppi/process\",\n            postData,\n            {\n              headers: {\n                Authorization:\n                  \"Bearer wThSvKxulVdLQJhsAsFo4e-2EIy8Z9LskgmsAhsbdzc\",\n                \"Content-Type\": \"application/json\",\n              },\n            }\n          )\n          .then((res) => {\n\n            //   history.push(`/order-complete/${props.tokenId}/${res.id}`);\n\n            axios.post(\n              \"https://thingproxy.freeboard.io/fetch/https://flex-service-staging.qa.spoton.sh/api/v1/ppi/reportOrder\",\n              post2Data,\n              {\n                headers: {\n                  Authorization:\n                    \"Bearer wThSvKxulVdLQJhsAsFo4e-2EIy8Z9LskgmsAhsbdzc\",\n                  \"Content-Type\": \"application/json\",\n                },\n              }\n            );\n\n            localStorage.removeItem('cart-id');\n            props.setReceipt(res);\n            window.alert(\"Payment successful!\");\n            setProcessing(false);\n          })\n          .catch((err) => {\n            window.alert(\"Payment processing failed!\");\n            setProcessing(false);\n          });\n      }, 1000);\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  // useEffect(() => {\n\n  //     /*\n  //         Takes Line Items from props and strutures the data\n  //         Object added to state\n  //     */\n\n  //     let lineItems = {}\n\n  //     props.liveObject.line_items.forEach(item => {\n\n  //         lineItems = {\n  //             ...lineItems,\n  //             [item.id]: {\n  //                 quantity: item.quantity,\n  //                 variants: {\n  //                     [item.variants[0].variant_id]: item.variants[0].option_id\n  //                 }\n  //             }\n  //         }\n  //     })\n\n  //     setLineItems(lineItems)\n\n  // }, [])\n\n  useEffect(() => {\n    /* *** Takes the Shipping Country and updates shipping Options *** */\n    props.getShippingOptions(shipCountry);\n  }, [shipCountry]);\n\n  const getCountryInfoShipping = () => {\n    /* *** Gives user proper options based on Shipping Country *** */\n\n    if (shipCountry === \"MX\") {\n      return mexico;\n    }\n\n    if (shipCountry === \"CA\") {\n      return canada;\n    }\n\n    if (shipCountry === \"US\") {\n      return stateOptions;\n    }\n  };\n\n  const getCountryInfoBilling = () => {\n    /* *** Gives user proper options based on Shipping Country *** */\n\n    if (billingShipCountry === \"MX\") {\n      return mexico;\n    }\n\n    if (billingShipCountry === \"CA\") {\n      return canada;\n    }\n\n    if (billingShipCountry === \"US\") {\n      return stateOptions;\n    }\n  };\n\n  const handleCheckBox = (e) => {\n    /* *** Toggles Checkbox on/off *** */\n    setSameBilling(!sameBilling);\n  };\n\n  const onSubmit = (data) => {\n    /* *** \n            Takes in all the data gathered from the Form\n            Parses the data properly to match the shape for capture\n        *** */\n\n    setProcessing(true);\n\n    let final = {};\n\n    final.line_items = lineItems;\n\n    final.fulfillment = {\n      shipping_method: props.shipOption,\n    };\n\n    final.customer = {\n      firstname: data.firstname,\n      lastname: data.lastname,\n      email: data.email,\n    };\n\n    final.shipping = {\n      name: `${data.firstname} ${data.lastname}`,\n      street: data.street,\n      town_city: data.town_city,\n      county_state: data.county_state,\n      postal_zip_code: data.postal_zip_code,\n      country: data.country,\n    };\n\n    if (!sameBilling) {\n      final.billing = {\n        name: data.billing_name,\n        street: data.billing_street,\n        town_city: data.billing_town_city,\n        county_state: data.billing_county_state,\n        postal_zip_code: data.billing_postal_zip_code,\n        country: data.billing_country,\n      };\n    }\n\n    if (data.gateway === \"stripe\") {\n      let stripInfo = {\n        name: `${data.firstname} ${data.lastname}`,\n        number: data.number,\n        exp_month: data.expiry_month,\n        exp_year: data.expiry_year,\n        cvc: data.cvc,\n        address_zip: data.postal_billing_zip_code,\n      };\n\n      axiosWithAuth()\n        .post(\"/tokens\", qs.stringify({ card: stripInfo }))\n        .then((res) => {\n          // console.log(res, 'res from token call')\n          final.payment = {\n            gateway: data.gateway,\n            card: {\n              token: res.data.id,\n            },\n          };\n\n          if (props.shipOption) {\n            commerce.checkout\n              .capture(props.tokenId, final)\n              .then((res) => {\n                // console.log(res, 'res from CAPTURING CHECKOUT!!!')\n                props.setReceipt(res);\n                localStorage.removeItem(\"cart-id\");\n                history.push(`/order-complete/${props.tokenId}/${res.id}`);\n                setProcessing(false);\n              })\n              .catch((err) => {\n                window.alert(err.data.error.message);\n                setProcessing(false);\n              });\n          } else {\n            window.alert(\"Please select a shipping method!\");\n            setProcessing(false);\n          }\n        })\n        .catch((err) => {\n          console.log(err.data, \"error message\");\n        });\n    } else {\n      final.payment = {\n        gateway: data.gateway,\n        card: {\n          number: data.number,\n          expiry_month: data.expiry_month,\n          expiry_year: data.expiry_year,\n          cvc: data.cvc,\n          postal_zip_code: data.postal_billing_zip_code,\n        },\n      };\n\n      console.log(final);\n\n      // if (props.shipOption) {\n      //     commerce.checkout.capture(props.tokenId, final)\n      //         .then(res => {\n      //                 // console.log(res, 'res from CAPTURING CHECKOUT!!!')\n      //                 props.setReceipt(res)\n      //                 localStorage.removeItem('cart-id')\n      //                 history.push(`/order-complete/${props.tokenId}/${res.id}`)\n      //                 setProcessing(false)\n      //         })\n      //         .catch(err => {\n      //                 window.alert(err.data.error.message)\n      //                 setProcessing(false)\n      //         })\n      // } else {\n      //     window.alert(\"Please select a shipping method!\")\n      //     setProcessing(false)\n      // }\n    }\n  };\n\n  return (\n    <Form\n      className=\"checkout-form\"\n      onSubmit={handleSubmit(onSubmit)}\n      loading={processing}\n    >\n      {/* <h1>Customer Info</h1>\n            <Form.Group widths='equal'>\n                <Controller\n                    id='customer' \n                    as={Form.Input} \n                    name=\"firstname\" \n                    control={control}\n                    fluid\n                    label='First Name'\n                    placeholder='John'\n                    rules={{ required: \"Please enter Firstname\" }}\n                    error={errors.firstname && errors.firstname.message} \n                />\n                <Controller \n                    fluid \n                    as={Form.Input}\n                    control={control}\n                    name='lastname' \n                    label='Last name' \n                    placeholder='Smith'\n                    rules={{ required: \"Please enter Lastname\" }}\n                    error={errors.lastname && errors.lastname.message}  \n                />\n                <Controller \n                    fluid \n                    name='email'\n                    type='email' \n                    label='Email' \n                    placeholder='xyz@example.com'\n                    as={Form.Input}\n                    control={control}\n                    rules={{ required: \"Please enter email\" }}\n                    error={errors.email && errors.email.message}  \n                />\n            </Form.Group>\n            <Form.Group>\n                <Controller \n                    width={10} \n                    name='street' \n                    label='Address' \n                    placeholder='122 Example St'\n                    as={Form.Input}\n                    control={control}\n                    rules={{ required: \"Please enter address\" }}\n                    error={errors.street && errors.street.message}   \n                />\n                <Controller\n                    width={6} \n                    name='country' \n                    label='Select Country' \n                    options={countries}\n                    as={Form.Select}\n                    control={control}\n                    rules={{ required: \"Please select country\" }}\n                    error={errors.country && errors.country.message} \n                    onChange={(e) => {\n                        setShipCountry(e[1].value)\n                        props.setShipOption(false)\n                        reset({\n                            county_state: ''\n                        })\n                        return e[1].value \n                    }}\n                />\n            </Form.Group>\n            <Form.Group>\n                <Controller \n                    width={6} \n                    name='town_city' \n                    label='Town/City' \n                    placeholder='Las Vegas' \n                    as={Form.Input}\n                    control={control}\n                    rules={{ required: \"Please enter Town/City\" }}\n                    error={errors.town_city && errors.town_city.message} \n                />\n                <Controller\n                    width={6} \n                    label='County/State/Province/Territory' \n                    placeholder='Search ...'\n                    name='county_state' \n                    search \n                    fluid\n                    options={getCountryInfoShipping()}\n                    as={Form.Select}\n                    control={control}\n                    rules={{ required: \"Must Select Country First\" }}\n                    error={errors.county_state && errors.county_state.message} \n                    onChange={(e) => e[1].value}\n                />\n                <Controller\n                    width={4} \n                    name='postal_zip_code' \n                    label='Zip/Postal' \n                    placeholder='00000'\n                    as={Form.Input}\n                    control={control}\n                    max='99999'\n                    rules={{ \n                        required: \"Please enter zip\",\n                        // max: 99999\n                    }}\n                    error={errors.postal_zip_code && errors.postal_zip_code.message} \n                />\n            </Form.Group> */}\n      <h1>Payment Info</h1>\n      <Form.Group className=\"payment-radio\">\n        <input\n          name=\"gateway\"\n          type=\"radio\"\n          value=\"test_gateway\"\n          ref={register({ required: \"Please select Payment Type\" })}\n          onChange={(e) => {\n            reset({\n              number: 4242424242424242,\n              cvc: 123,\n              postal_billing_zip_code: 90210,\n            });\n          }}\n        />\n        <label htmlFor=\"test_gateway\">  SpotOn Flex(SANDBOX)</label>\n        {/* <input\n                    name='gateway' \n                    type='radio'\n                    value='stripe'\n                    ref={register({ required: \"Please select Payment Type\" })}\n                    onChange={e => {\n                        reset({\n                            number: '',\n                            cvc: '',\n                            postal_billing_zip_code: ''\n                        })\n                    }}\n                /> */}\n        {/* <label htmlFor=\"stripe\">Credit Card</label> */}\n      </Form.Group>\n      {errors.gateway && (\n        <Label className=\"payment-type-error\" basic pointing>\n          {errors.gateway.message}\n        </Label>\n      )}\n      <Form.Group>\n        {/* <Controller\n                    name='number'\n                    type='number' \n                    label='Credit Card Number' \n                    placeholder='0000111100001111' \n                    as={Form.Input}\n                    control={control}\n                    rules={{ required: \"Please enter Card Number\" }}\n                    error={errors.number && errors.number.message}\n                />\n                <Controller\n                    name='postal_billing_zip_code' \n                    max='99999'\n                    label='Billing Zip' \n                    placeholder='Enter Billing Zip Code'\n                    as={Form.Input}\n                    control={control}\n                    rules={{ required: \"Please enter Billing zip\" }}\n                    error={errors.postal_billing_zip_code && errors.postal_billing_zip_code.message} \n                /> */}\n      </Form.Group>\n      {/* <Form.Group>\n                <Controller \n                    width={3} \n                    name='expiry_month' \n                    fluid \n                    options={monthOptions} \n                    label='Month' \n                    as={Form.Select}\n                    control={control}\n                    rules={{ required: \"Must Select Expiration Month\" }}\n                    error={errors.expiry_month && errors.expiry_month.message} \n                    onChange={(e) => e[1].value} \n                />\n                <Controller \n                    width={3} \n                    name='expiry_year' \n                    fluid \n                    options={yearOptions} \n                    label='Year' \n                    as={Form.Select}\n                    control={control}\n                    rules={{ required: \"Must Select Expiration Year\" }}\n                    error={errors.expiry_year && errors.expiry_year.message} \n                    onChange={(e) => e[1].value} \n                />\n                <Controller \n                    width={3} \n                    name='cvc'\n                    label='CVC' \n                    placeholder='123'\n                    as={Form.Input}\n                    control={control}\n                    rules={{ required: \"Please enter CVC\" }}\n                    error={errors.cvc && errors.cvc.message} \n                />\n            </Form.Group>\n            <h1>Billing Address</h1>\n            <Form.Checkbox label='Billing Address Same as Shipping ...' onChange={handleCheckBox} />\n            {!sameBilling && (\n                <>\n                    <Form.Group widths='equal'>\n                        <Controller \n                            width={10} \n                            name='billing_name' \n                            label='Billing Name' \n                            placeholder='John Smith' \n                            as={Form.Input}\n                            control={control}\n                            rules={{ required: \"Please enter Billing Name\" }}\n                            error={errors.billing_name && errors.billing_name.message} \n                        />\n                        <Controller\n                            width={6} \n                            name='billing_country' \n                            label='Select Country' \n                            options={countries}\n                            as={Form.Select}\n                            control={control}\n                            rules={{ required: \"Please select country\" }}\n                            error={errors.billing_country && errors.billing_country.message} \n                            onChange={(e) => {\n                                setBillingShipCountry(e[1].value)\n                                reset({\n                                    billing_county_state: ''\n                                })\n                                return e[1].value \n                            }}\n                        />\n                    </Form.Group>\n                    <Form.Group>\n                        <Controller \n                            width={4} \n                            name='billing_street' \n                            label='Address' \n                            placeholder='122 Example St' \n                            as={Form.Input}\n                            control={control}\n                            rules={{ required: \"Please enter Street Address\" }}\n                            error={errors.billing_street && errors.billing_street.message} \n                        />\n                        <Controller \n                            width={3} \n                            name='billing_town_city' \n                            label='City' \n                            placeholder='Las Vegas' \n                            as={Form.Input}\n                            control={control}\n                            rules={{ required: \"Please enter City/Town\" }}\n                            error={errors.billing_town_city && errors.billing_town_city.message} \n                        />\n                        <Controller\n                            width={6} \n                            label='County/State/Province/Territory' \n                            placeholder='Search State'\n                            name='billing_county_state' \n                            search \n                            selection \n                            fluid\n                            options={getCountryInfoBilling()}\n                            as={Form.Select}\n                            control={control}\n                            rules={{ required: \"Must Select Country First\" }}\n                            error={errors.billing_county_state && errors.billing_county_state.message} \n                            onChange={(e) => e[1].value}\n                        />\n                        <Controller \n                            width={3} \n                            name='billing_postal_zip_code' \n                            label='Zip' \n                            placeholder='00000' \n                            as={Form.Input}\n                            control={control}\n                            rules={{ required: \"Please enter Billing Zipcode\" }}\n                            error={errors.billing_postal_zip_code && errors.billing_postal_zip_code.message} \n                        />\n                    </Form.Group>\n                </>\n            )} */}\n      <Form.Button color=\"green\" size=\"huge\">\n        Show QR to Pay\n      </Form.Button>\n      {processing && (\n        <QrReader\n          delay={10}\n          style={previewStyle}\n          onError={handleError}\n          onScan={handleScan}\n        />\n      )}\n    </Form>\n  );\n};\n\nexport default CheckoutForm;\n","import axios from 'axios'\n\nexport const axiosWithAuth = () => {\n    const token = 'sk_test_42456f33161dad1c790a1b1f2a9257d1ab94f197ea9ba'\n\n\treturn axios.create({\n        baseURL: 'https://api.stripe.com/v1',\n\t\theaders: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type':  'application/x-www-form-urlencoded'\n        },\n\t})\n}   \n","import React from 'react';\nimport { Item, Header } from 'semantic-ui-react';\n\nconst CheckoutItems = (props) => {\n    // console.log(props, 'props from checkout container')\n\n\n    return (\n        <>\n            <div className='item-group-name-size'>\n                <h3>{props.item.product_name}</h3>\n                {/* <span>{props.item.variants[0].option_name}</span> */}\n            </div>\n            <h4>{props.item.line_total.formatted_with_symbol}</h4>\n        </>\n    );\n};\n\nexport default CheckoutItems;","import React, { useState, useEffect } from 'react';\nimport { Grid, Header, Container, Segment, Divider, Dropdown, Input, Button } from 'semantic-ui-react';\nimport Commerce from '@chec/commerce.js'\n\n// Component Imports\nimport CheckoutForm from './CheckoutForm'\nimport CheckoutItems from './CheckoutItems'\nimport { Link } from 'react-router-dom';\n\nconst CheckoutContainer = (props) => {\n    // console.log(props, 'Checking prop being sent from Private Route!!!!!!')\n\n    const commerce = new Commerce(\"pk_test_424561dc50e53e368fb3563d39a0622a953124acb7dca\")\n\n    const [liveObject, setLiveObject] = useState()\n    const [tokenId, setTokenId] = useState()\n    const [shippingOptions, setShippingOptions] = useState()\n    const [shipOption, setShipOption] = useState()\n    const [discountCode, setDiscountCode] = useState()\n    const [noDiscountCode, setNoDiscountCode] = useState()\n    const [invalidDiscountCode, setInvalidDiscountCode] = useState()\n\n\n    useEffect(() => {\n\n        /* *** Getting Checkout Token - Set Live Object in State *** */\n\n        let cartId = props.match.params.id\n        commerce.checkout.generateToken(cartId, { type: 'cart' })\n            .then(res => {\n                // console.log(res, 'response from generating checkout Token')\n                setLiveObject(res.live)\n                setTokenId(res.id)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n\n        props.setCheckout(true)\n    },[])\n\n    const getShippingOptions = (countrySymbol) => {\n\n        /* \n        Getting the Customer's Shipping Options based on the Country\n        Function is triggered once user selects country in CheckoutForm. \n        */\n\n        if (countrySymbol) {\n            commerce.checkout.getShippingOptions(tokenId, {\n                country: countrySymbol\n            })\n                .then(res => {\n                    // console.log(res, 'res from getting Shipping options by country')\n                    let shippingOptionsArray = res.map(option => {\n                        let shInfo = {}\n    \n                        shInfo.key = countrySymbol\n                        shInfo.text = `${option.description}(${option.price.formatted_with_code})`\n                        shInfo.value = option.id\n            \n                        return shInfo\n                    })\n                    setShippingOptions(shippingOptionsArray)\n                })\n                .catch(err => console.log(err))\n        }\n    }\n\n    const handleReturnCart = e => {\n        /* *** Make Sure user is returned to modal with Cart Info *** */\n        props.setModalOpen(true)\n    }\n\n    const handleDropDownShipping = (e, {value, options}) => { \n        \n        /* \n        Applies shipping option to Cart Total\n        Updates Live Object in state \n        */\n\n        commerce.checkout.checkShippingOption(tokenId, {\n            id: value,\n            country: options[0].key\n        })\n            .then(res => {  \n                // console.log(res, 'res from checking discount code')\n                setShipOption(value)\n                setLiveObject(res.live) \n            })\n            .catch(err => console.log(err))\n\n    }\n\n    const handleDiscountCode = (e, {value}) => {\n        /* Putting Discount Code in State */\n        setDiscountCode(value)\n    }\n    \n    const handleDiscountClick = (e) => {\n\n        /* *** Checking to Make Sure Discount Code is Valid *** */\n\n        e.preventDefault()\n\n        if (!discountCode) {\n            setNoDiscountCode(true)\n            setInvalidDiscountCode(false)\n        } else {\n            commerce.checkout.checkDiscount(tokenId, {code: discountCode})\n                .then(res => {  \n                    // console.log(res, 'res from checking discount code')\n                    if (!res.valid) {\n                        setInvalidDiscountCode(true)\n                    } else {\n                        setInvalidDiscountCode(false)\n                        setLiveObject(res.live)\n                        setDiscountCode(null)\n                    }\n                    \n                    setNoDiscountCode(false)\n                })\n                .catch(err => console.log(err))\n        }\n    }\n\n    return (\n        <Grid columns={2} centered padded>\n            <Grid.Row className='checkout-row'>\n                <Grid.Column width={8}>\n                    {liveObject && tokenId && (\n                        <CheckoutForm \n                            liveObject={liveObject} \n                            tokenId={tokenId} \n                            shipOption={shipOption}\n                            getShippingOptions={getShippingOptions}\n                            setShipOption={setShipOption}\n                            setReceipt={props.setReceipt}\n                        />\n                    )}\n                </Grid.Column>\n\n                <Grid.Column width={6}>\n                    <Segment padded>\n                        <Header textAlign='center' size='huge'>Current Cart</Header>\n                        <Header onClick={handleReturnCart} textAlign='center'>\n                            <Link to='/'>Return to Cart</Link>\n                        </Header>\n\n                        {liveObject && liveObject.line_items.map(item => (\n                            <Container className='item-data-container' key={item.id}>\n                                <CheckoutItems item={item}/>\n                            </Container>\n                        ))}\n                        {/* <Divider horizontal>Shipping Options</Divider> */}\n\n                        {/* <Dropdown\n                            placeholder='Select Shipping Method'\n                            fluid\n                            selection\n                            onChange={handleDropDownShipping}\n                            options={shippingOptions}\n                        /> */}\n\n                        {/* {!shipOption && <p>Select Country for Shipping Options</p>}  */}\n                        <Divider horizontal>Discount Code</Divider>\n\n                        <form className='discount-code' onSubmit={handleDiscountClick}>\n                            <Input onChange={handleDiscountCode} />\n                            <Button color='black'>Apply</Button>     \n                        </form>\n                        {noDiscountCode && <p>No Discount Code Entered</p>}\n                        {invalidDiscountCode && <p>Invalid Code!</p>}\n                        <Divider horizontal>Cart Totals</Divider>\n                        \n                        {liveObject && (\n                            <>\n                                {shipOption && (\n                                    <Header \n                                        color='olive' \n                                        textAlign='center'\n                                    >\n                                        (Shipping) + {liveObject.shipping.price.formatted}\n                                    </Header>\n                                )}\n                                {liveObject.discount.length !== 0 && (\n                                    <Header \n                                        color='olive' \n                                        textAlign='center'\n                                    >\n                                        (LUCKY) - {liveObject.discount.amount_saved.formatted}\n                                    </Header>\n                                )}\n                                <Header textAlign='center' size='large'>{liveObject.total.formatted_with_symbol}</Header>\n                            </>\n                        )}\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n};\n\nexport default CheckoutContainer;","import React, { useEffect } from 'react';\nimport { Segment, Header, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport img from '../img/checkout-complete-img.JPG'\n\n\nconst CheckoutComplete = (props) => {\n\n    useEffect(() => {\n        props.setCheckout(true)\n    }, [])\n\n    return (\n        <>\n            <Segment className='order-complete'>\n                <div>\n                    <h1>Order Complete</h1>\n                    <Header>Thanks for shopping at SeaWorld!</Header>\n                    <Link to='/'>Return to All Products</Link>\n                </div>\n                <Image src={img} size='large' />\n            </Segment>\n        </>\n    );\n};\n\nexport default CheckoutComplete;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom'\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n\t\n\n\treturn <Route {...rest} render={(props) => {\n\n\t\tif(localStorage.getItem('cart-id')) {\n\t\t\treturn <Component {...props} {...rest}/>\n\t\t} else {\n\t\t\treturn <Redirect to=\"/\" />\n\t\t}\n\n\t}} />\n}\n\nexport default PrivateRoute;","import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom'\nimport Commerce from '@chec/commerce.js'\nimport { Grid } from 'semantic-ui-react';\n\n//Component Imports\nimport Nav from './components/Nav'\nimport LeftPanel from './components/LeftPanel'\nimport Footer from './components/Footer'\nimport ProductContainer from './components/ProductContainer'\nimport CheckoutContainer from './components/CheckoutContainer'\nimport CheckoutComplete from './components/CheckoutComplete'\nimport PrivateRoute from './utils/PrivateRoute'\n\nexport const CartItemsContext = React.createContext()\n\nfunction App() {\n\n    const commerce = new Commerce(\"pk_test_424561dc50e53e368fb3563d39a0622a953124acb7dca\")\n\n    const [cart, setCart] = useState()\n    const [checkout, setCheckout] = useState(false)\n    const [modalOpen, setModalOpen] = useState(false)\n    const [receipt, setReceipt] = useState()\n\n    useEffect(() => {\n        commerce.cart.retrieve()\n            .then(res => {\n                // console.log(res, 'response from app useEffect')\n                setCart(res)\n            })\n    },[receipt])\n\n    const cartHelperFunctions = {\n\n        deleteItem: (lineItemId) => {\n            commerce.cart.remove(lineItemId)\n                .then(res => {\n                    setCart(res.cart)\n                    localStorage.removeItem('cart-id')\n                })\n        },\n        addQaunity: (lineItemId, newQuanity) => {\n            commerce.cart.update(lineItemId, {quantity: newQuanity})\n                .then(res => {\n                    setCart(res.cart)\n                    \n                })\n        },\n        subtractQuanity: (lineItemId, newQuanity) => {\n\n            if (newQuanity === 0) {\n                cartHelperFunctions.deleteItem(lineItemId)\n            } else {\n                commerce.cart.update(lineItemId, {quantity: newQuanity})\n                    .then(res => {\n                        setCart(res.cart)\n                    })\n            }\n\n        }\n    }\n\n    const addToCart = (productId, variantInfo) => {\n\n        // if(variantInfo) {\n            commerce.cart.add(productId, 1, variantInfo)\n                .then(res => {\n                    // console.log(res, 'res from adding to CART!!')\n                    setCart(res.cart)\n                })\n        // } else {\n        //     window.alert('Please Select a Shirt Size')\n        // }\n    }\n\n    const emptyCart = () => {\n        commerce.cart.empty()\n            .then(res => {\n                // console.log(res, 'res from empty cart')\n                setCart(null)\n                localStorage.removeItem('cart-id')\n            })\n    }\n\n    return (\n        <div className=\"App\">\n\n            <CartItemsContext.Provider value={cartHelperFunctions}>\n                <Nav \n                    cart={cart} \n                    emptyCart={emptyCart} \n                    checkout={checkout} \n                    setCheckout={setCheckout}\n                    modalOpen={modalOpen}\n                    setModalOpen={setModalOpen}\n                />\n            </CartItemsContext.Provider>\n\n            <Grid centered stackable padded relaxed>\n                {/* <LeftPanel /> */}\n                <Grid.Column className='left-column' width={5}>\n                    <Route exact path=\"/\" component={LeftPanel} />\n                </Grid.Column>\n\n                {/* <Right Panel /> */}\n                <Grid.Column width={9}>\n                    <Route exact path=\"/\" render={props => {\n                        return (\n                            <ProductContainer \n                                {...props}\n                                addToCart={addToCart}\n                                setCheckout={setCheckout}\n                            />\n                        )\n                    }}/>\n                </Grid.Column>\n            </Grid>\n\n            {/* Route to Checkout */}\n            <PrivateRoute \n                component={CheckoutContainer}\n                path={`/checkout/:id`} \n                setCheckout={setCheckout}\n                setModalOpen={setModalOpen}\n                setReceipt={setReceipt}\n            />\n            {/* <PrivateRoute \n                component={CheckoutComplete}\n                path={`/order-complete/:checkoutToken/:orderId`}\n                setCheckout={setCheckout} \n            /> */}\n            <Route path=\"/order-complete/:checkoutToken/:orderId\" render={props => {\n                return (\n                    <CheckoutComplete \n                        {...props}\n                        setCheckout={setCheckout}\n                    />\n                )\n                }}\n            />\n            <Footer />\n        </div>\n  );\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\n\n// router import\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n,document.getElementById('root'));\n"],"sourceRoot":""}